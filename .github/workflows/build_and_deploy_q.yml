name: Bygg og deploy til Q-miljø
# TODO: Sjekk om man kan zippe med nais.yaml
on:
  push:
    branches:
      - 'main'
      - 'master'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Miljø (støtter...)'
        required: true
        default: 'gcp'
      bump_patch:
        description: 'Skriv "bump" her for å bygge release og øke patchversjon på snapshot. Kun for main branch.'
        default: ''

env:
  APPNAME: meldeplikt-kafka-producer
  SPRINGPROFILES: nais
  SLACK_ALERT_CHANNEL: '#team-meldeplikt-alerts-dev'
  ENVIRONMENT: ${{ github.event.inputs.environment }}
  VAULT_KV_ENV: preprod/fss
  INGRESS_POSTFIX: dev.nav.no
  CLUSTER: dev-gcp
  NAIS_FILE: .nais/nais.yaml
  BUILD_USE_MAVEN: false
  BUILD_USE_GRADLE: false
  BUILD_USE_NPM: true
  MAIN_BRANCH: 'refs/heads/master' # Heter branchen main eller master?

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - name: Set default environment for push
        if: github.event_name == 'push' && github.ref == ${{ env.MAIN_BRANCH }}
        run: echo "ENVIRONMENT=q0" >> $GITHUB_ENV
      - name: Checkout
        uses: actions/checkout@v2
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          java-version: '11'
          distribution: 'adopt-openj9'
      - name: Setup Node
        if: ${{ env.BUILD_USE_MAVEN }}
        uses: actions/setup-node@v2
        with:
          node-version: '14'
      - name: Setup Maven # Vi bruker alltid Maven til versjonshåndtering
        uses: actions/cache@preview
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-
      - name: Read version from pom
        uses: entimaniac/read-pom-version-action@1.0.0
        id: getVersion
      - name: Calculate snapshot string
        id: setSnapshot
        if: github.event.inputs.bump_patch != 'bump'
        run: |
          echo "::set-output name=snapshot::SNAPSHOT-$(date +'%Y%m%d-%H%M%S')"
      # Release version blir eksisterende versjon uten -SNAPSHOT hvis vi bumper, eller med tillegg av en timestamp hvis ikke
      - name: Calculate release version
        uses: slime-hatena/semantic-versioning-calculator-action@main
        id: calcReleaseVersion
        with:
          version: ${{ steps.getVersion.outputs.version }}
          increment_major: 'false'
          increment_minor: 'false'
          increment_patch: 'false'
          prerelease: ${{ steps.setSnapshot.outputs.snapshot }}
      # Next version blir eksisterende versjon +0.0.1, med postfix -SNAPSHOT
      - name: Calculate next version
        uses: slime-hatena/semantic-versioning-calculator-action@main
        id: calcNextVersion
        with:
          version: ${{ steps.getVersion.outputs.version }}
          increment_major: 'false'
          increment_minor: 'false'
          increment_patch: 'true'
          prerelease: 'SNAPSHOT'
      - name: Set vars
        id: setVars
        run: |
          echo "::set-output name=jarfile::${{ env.APPNAME }}-${{ steps.calcReleaseVersion.outputs.version }}.jar"
          echo "::set-output name=image::docker.pkg.github.com/${{ github.repository }}/${{ env.APPNAME }}:${{ steps.calcReleaseVersion.outputs.version }}"
      - name: Set release version in pom.xml
        run: mvn versions:set -DnewVersion=${{ steps.calcReleaseVersion.outputs.version }}
      - name: Test and build (Maven)
        if: ${{ env.BUILD_USE_MAVEN }}
        run: mvn clean package -B -e -U
        continue-on-error: false
      - name: Test and build (npm)
        if: ${{ env.BUILD_USE_NPM }}
        run: |
          npm ci
          npm test
          npm run build
        continue-on-error: false
      - name: Build docker image
        run: |
          docker build --build-arg JAR_FILE=${{ steps.setVars.outputs.JARFILE }} --build-arg SPRING_PROFILES=${{ env.SPRINGPROFILES }} -t ${{ steps.setVars.outputs.IMAGE }} .
      - name: Login to Github Package Registry
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
      - name: Push Docker image
        run: |
          docker push ${{ steps.setVars.outputs.IMAGE }}
      - name: Deploy til q-miljø
        if: always() && (env.ENVIRONMENT == 'q0' || env.ENVIRONMENT == 'q1' || (github.event_name == 'push' && github.ref == 'refs/heads/main'))
        uses: nais/deploy/actions/deploy@v1
        env:
          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
          PRINT_PAYLOAD: true
          CLUSTER: ${{ env.CLUSTER }}
          RESOURCE: ${{ env.NAIS_FILE }}
          VAR: IMAGE=${{ steps.setVars.outputs.IMAGE }},appName=${{ env.APPNAME }},dashEnv=-${{ env.ENVIRONMENT }},vaultKvEnv=${{ env.VAULT_KV_ENV }},slackAlertChannel=${{ env.SLACK_ALERT_CHANNEL }},ingress=https://${{ env.APPNAME  }}-${{ env.ENVIRONMENT }}.${{ env.INGRESS_POSTFIX }},kafkaPool=${{ env.KAFKA_POOL }}
      # Hvis det er ny versjon, oppdater pom.xml og utfør git commit/push
      - name: Set next version in pom.xml
        if: github.event.inputs.bump_patch == 'bump' && github.ref == ${{ env.MAIN_BRANCH }}
        run: mvn versions:set -DnewVersion=${{ steps.calcNextVersion.outputs.version }}
      - name: Commit og push bumped version
        if: github.event.inputs.bump_patch == 'bump' && github.ref == ${{ env.MAIN_BRANCH }}
        run: |
          git config --local user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git config --local user.name "github-actions[bot]"
          git commit -m "Bump version fra Github Actions" -a
          git tag -a ${{ env.APPNAME }}-${{ steps.calcNextVersion.outputs.version }} -m ${{ env.APPNAME }}-${{ steps.calcNextVersion.outputs.version }}
      - name: Push changes
        if: github.event.inputs.bump_patch == 'bump' && github.ref == ${{ env.MAIN_BRANCH }}
        uses: ad-m/github-push-action@master
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          branch: ${{ github.ref }}
